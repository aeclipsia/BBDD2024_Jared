SET SERVEROUTPUT ON;

create or replace PROCEDURE PROC_1(PNUM1 NUMBER, PNUM2 NUMBER, PNUM3 NUMBER)
AS
  MAXI NUMBER;
BEGIN
IF PNUM1!=PNUM2 AND PNUM2!=PNUM3 AND PNUM1!=PNUM3
THEN
  IF PNUM1>PNUM2 AND PNUM1>PNUM3
  THEN
    MAXI:=PNUM1;
    DBMS_OUTPUT.PUT_LINE('MÁXIMO: '|| MAXI);
  ELSIF PNUM2>PNUM1 AND PNUM2>PNUM3
  THEN
    MAXI:=PNUM2;
    DBMS_OUTPUT.PUT_LINE('MÁXIMO: '||MAXI);
  ELSE
    MAXI:=PNUM3;
    DBMS_OUTPUT.PUT_LINE('MÁXIMO: '||MAXI);
  END IF; 
ELSE
  DBMS_OUTPUT.PUT_LINE('DATOS ERRÓNEOS');
END IF;

END;

EXECUTE PROC_1(5,4,3);

create or replace PROCEDURE PROC_2(PRECIO NUMBER, INCREMENTO NUMBER)
AS
  PRECIOFINAL NUMBER;
BEGIN
IF PRECIO<0 OR (INCREMENTO<0 OR INCREMENTO>100)
THEN
  DBMS_OUTPUT.PUT_LINE('DATOS ERRÓNEOS');
ELSE
  PRECIOFINAL:=PRECIO*(INCREMENTO/100);
  DBMS_OUTPUT.PUT_LINE(PRECIO+(PRECIO*(INCREMENTO/100)));
END IF;
END;

EXECUTE PROC_2(100,10);

create or replace PROCEDURE PROC_3(CADENA VARCHAR2)
AS
BEGIN
  DBMS_OUTPUT.PUT_LINE(UPPER(CADENA));
  DBMS_OUTPUT.PUT_LINE(LENGTH(CADENA));
END;

EXECUTE PROC_3('HOLA');

CREATE OR REPLACE PROCEDURE PROC_4(CADENA VARCHAR2)
AS
BEGIN
  FOR CONTADOR IN 1..LENGTH(CADENA) LOOP
    DBMS_OUTPUT.PUT_LINE(SUBSTR(CADENA,CONTADOR,1));
  END LOOP;
END;

EXECUTE PROC_4('HOLA');

create or replace PROCEDURE PROC_5(NUMERO NUMBER)
AS
FIN NUMBER:=10;
BEGIN
  FOR CONTADOR IN 1..FIN LOOP
    DBMS_OUTPUT.PUT_LINE(NUMERO||'*'||CONTADOR||'='||(NUMERO*CONTADOR));
  END LOOP;
END;

EXECUTE PROC_5(10);

create or replace PROCEDURE PROC_6(PNUM1 NUMBER, PNUM2 NUMBER)
AS

BEGIN
  FOR CONTADOR IN PNUM1..PNUM2 LOOP
    IF MOD(CONTADOR,2)=0 THEN
      DBMS_OUTPUT.PUT_LINE(CONTADOR);
    END IF;
  END LOOP;
END;

EXECUTE PROC_6(2,9);

create or replace FUNCTION FUNC_7(FECHA DATE)
RETURN number
IS
Y NUMBER;
BEGIN
  Y:=TO_CHAR(FECHA,'YYYY');
  RETURN Y;
END;

EXECUTE VER(FUNC_7 (SYSDATE));
EXECUTE VER(FUNC_7 ('31/12/1991'));

CREATE OR REPLACE FUNCTION FUNC_8(FECHA1 DATE, FECHA2 DATE)
RETURN NUMBER
IS
Y NUMBER;
BEGIN
  Y:=ABS(TRUNC((FECHA2-FECHA1)/365.25));
  RETURN Y;
END;

EXECUTE VER(FUNC_8 ('12/11/2000',SYSDATE));

EXECUTE VER(FUNC_8 (SYSDATE,'12/11/2000'));

CREATE OR REPLACE FUNCTION FUNC_9(FECHA1 DATE, FECHA2 DATE)
RETURN NUMBER
IS
Y NUMBER;
BEGIN
  Y:=ABS(TRUNC((FUNC_8(FECHA1, FECHA2)/3)));
  RETURN Y;
END;

EXECUTE VER(FUNC_9 ('12/11/2000',SYSDATE));

CREATE OR REPLACE PROCEDURE PROC_10(NOMBRE VARCHAR2, FECHA_NAC DATE, SALARIO NUMBER)
AS
  SALARIOFINAL NUMBER;
BEGIN
  SALARIOFINAL:=(SALARIO/30)*(ABS(ROUND(LAST_DAY(SYSDATE)-(SYSDATE+1))));

  IF (FUNC_8(FECHA_NAC,SYSDATE)<18 OR FUNC_8(FECHA_NAC,SYSDATE)>65 OR SALARIO<600 OR SALARIO>3500)
  THEN
    DBMS_OUTPUT.PUT_LINE('ERROR, DATOS NO VÁLIDOS');
  ELSE
    DBMS_OUTPUT.PUT_LINE('BIENVENIDO '||NOMBRE||', ESTE MES COBRARÁS: '||SALARIOFINAL);
  END IF;
END;

EXECUTE PROC_10('PEPE', '13/01/2000', 1200);


---------------------------------------------------------------

--PROCEDIMIENTO QUE MUESTRA SI DOS NUMEROS SON "AMIGOS"

--DOS NÚMEROS SON AMIGOS SI LA SUMA DE LOS DIVISORES DE UNO ES EL OTRO O VICEVERSA

--POR EJEMPLO SON AMIGOS 220 Y 284, 1184 Y 1210, 2620 Y 2924

--PARA ELLO VAMOS A IMPLEMENTAR UNA FUNCION QUE SE LLAME SUMA_DIVISORES
--QUE RECIBE UN NÚMERO Y DEVUELVE LA SUMA DE SUS DIVISORES

--POR EJEMPLO SUMA_DIVISORES (8) DEVUELVE 7

CREATE OR REPLACE FUNCTION SUMA_DIVISORES(PNUM1 NUMBER)
RETURN NUMBER
IS
DIVTOTAL NUMBER := 0;
BEGIN
  FOR CONTADOR IN 1..PNUM1/2 LOOP
    IF MOD(PNUM1,CONTADOR)=0
    THEN
      DIVTOTAL:=DIVTOTAL+CONTADOR;
    END IF;
  END LOOP;
  RETURN DIVTOTAL;
END;

CREATE OR REPLACE PROCEDURE NUM_AMIGOS(PNUM1 NUMBER, PNUM2 NUMBER)
AS
BEGIN
 IF SUMA_DIVISORES(PNUM1)=PNUM2 AND SUMA_DIVISORES(PNUM2)=PNUM1
 THEN
   DBMS_OUTPUT.PUT_LINE(PNUM1||' Y '||PNUM2||' SON AMIGOS');
 ELSE
   DBMS_OUTPUT.PUT_LINE(PNUM1||' Y '||PNUM2||' NO SON AMIGOS');
 END IF;
END;

EXECUTE NUM_AMIGOS(220,284);
EXECUTE NUM_AMIGOS(1184,1210);
EXECUTE NUM_AMIGOS(2620,2924);
EXECUTE NUM_AMIGOS(320,284);

CREATE OR REPLACE PROCEDURE BORRAR_DEPARTAMENTO(PNUM NUMBER)
AS
BEGIN
  DELETE DEPART
  WHERE DEPT_NO = PNUM;
END;

CREATE OR REPLACE PROCEDURE ALTA_DEPARTAMENTO (PNUM NUMBER, PNOMBRE VARCHAR2, PLOCALIDAD VARCHAR2)
AS
CONTADOR NUMBER;
BEGIN
  CONTADOR:=BUSCAR_DEPART(PNUM);     
  IF CONTADOR = 0 THEN
    SELECT COUNT(*) INTO CONTADOR
      FROM DEPART
        WHERE DNOMBRE = PNOMBRE AND LOC = PLOCALIDAD;     
      IF CONTADOR = 0 THEN
        INSERT INTO DEPART
        VALUES (PNUM, PNOMBRE, PLOCALIDAD);  
      ELSE
        DBMS_OUTPUT.PUT_LINE('YA EXISTE UN DEPARTAMENTO CON EL MISMO NOMBRE EN LA MISMA LOCALIDAD');
      END IF;
  ELSE
    DBMS_OUTPUT.PUT_LINE('YA EXISTE UN DEPARTAMENTO CON EL MISMO NUMERO');
  END IF; 
END;

EXECUTE ALTA_DEPARTAMENTO(30,'MARKETING','CANARIAS');
EXECUTE ALTA_DEPARTAMENTO(50,'PRODUCCION','BILBAO');
EXECUTE ALTA_DEPARTAMENTO(50,'PRODUCCION','MADRID');

SELECT * FROM DEPART;

CREATE OR REPLACE PROCEDURE MODIFICAR_DEPARTAMENTO (PNUM NUMBER, PNUEVA_LOC VARCHAR2)
AS
CONTADOR NUMBER;
BEGIN
  CONTADOR:=BUSCAR_DEPART(PNUM);    
  IF CONTADOR = 0 THEN
    DBMS_OUTPUT.PUT_LINE('NO EXISTE EL DEPARTAMENTO '|| PNUM);
  ELSE
    UPDATE DEPART
    SET LOC = PNUEVA_LOC
    WHERE DEPT_NO = PNUM;
  END IF; 
END;

EXECUTE MODIFICAR_DEPARTAMENTO(50,'CANARIAS');
SELECT * FROM DEPART;

CREATE OR REPLACE FUNCTION BUSCAR_DEPART(PNUM NUMBER)
RETURN NUMBER
IS
CONTADOR NUMBER;
BEGIN
   SELECT COUNT(*) INTO CONTADOR
    FROM DEPART
      WHERE DEPT_NO = PNUM; 
   RETURN CONTADOR;   
END;

create or replace PROCEDURE BORRAR_DEPARTAMENTO (PNUM NUMBER)
AS
CONTADOR NUMBER;
BEGIN
  CONTADOR:=BUSCAR_DEPART(PNUM);    
  IF CONTADOR = 0 THEN
    DBMS_OUTPUT.PUT_LINE('NO EXISTE EL DEPARTAMENTO '||PNUM);
  ELSE
    
    SELECT COUNT(*) INTO CONTADOR
      FROM EMPLE
        WHERE DEPT_NO = PNUM;
    
    IF CONTADOR = 0 THEN
      DELETE DEPART
      WHERE DEPT_NO = PNUM;
    ELSE
      DBMS_OUTPUT.PUT_LINE('ESTE DEPARTAMENTO TIENE EMPLEADOS!!!');
    END IF;
  END IF; 
END;

EXECUTE BORRAR_DEPARTAMENTO(30);
EXECUTE BORRAR_DEPARTAMENTO(80);

SELECT * FROM DEPART;

SELECT * FROM EMPLE;

create or replace FUNCTION PL_1 (PAPELLIDO VARCHAR2)
RETURN DATE
IS
F_ALTA DATE;
BEGIN
    SELECT FECHA_ALTA INTO F_ALTA
      FROM EMPLE
        WHERE APELLIDO = PAPELLIDO;
        RETURN F_ALTA;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END;

EXECUTE VER(PL_1('TOVAR'));

CREATE OR REPLACE PROCEDURE PL_2(PAPELLIDO VARCHAR2, PNUEVO_OFICIO VARCHAR2)
AS
OFICIO_ANTIGUO EMPLE.OFICIO%TYPE;
EMPLEADO EMPLE.APELLIDO%TYPE;
BEGIN
  SELECT APELLIDO INTO EMPLEADO
    FROM EMPLE
      WHERE APELLIDO = PAPELLIDO;
  
  SELECT OFICIO INTO OFICIO_ANTIGUO
    FROM EMPLE
      WHERE APELLIDO = PAPELLIDO;
      
  UPDATE EMPLE
      SET OFICIO = PNUEVO_OFICIO
      WHERE PAPELLIDO = APELLIDO;
      
    DBMS_OUTPUT.PUT_LINE('OFICIO ANTIGUO: '||OFICIO_ANTIGUO||', OFICIO NUEVO: '||PNUEVO_OFICIO);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('NO EXISTE EL EMPLEADO '||PAPELLIDO);
END;

EXECUTE PL_2('TOVAR','CEO');

CREATE OR REPLACE PROCEDURE PL_3(PDEPT_NO NUMBER)
AS
MAXI NUMBER;
MINI NUMBER;
MED NUMBER;
CONTADOR NUMBER;
BEGIN
  SELECT COUNT(*) INTO CONTADOR
    FROM EMPLE
      WHERE PDEPT_NO = DEPT_NO;
      
  IF CONTADOR = 0 THEN
    DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO '||PDEPT_NO||' NO EXISTE O NO TIENE EMPLEADOS');
  ELSE
      
  SELECT MAX(SALARIO) INTO MAXI
    FROM EMPLE
      WHERE PDEPT_NO = DEPT_NO;
      
  SELECT MIN(SALARIO) INTO MINI
    FROM EMPLE
      WHERE PDEPT_NO = DEPT_NO;
      
  SELECT AVG(SALARIO) INTO MED
    FROM EMPLE
      WHERE PDEPT_NO = DEPT_NO;
      
  DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO '||PDEPT_NO||' TIENE UN SALARIO MÁXIMO DE '||MAXI||', UN SALARIO MÍNIMO DE '||MINI||' Y UNA MEDIA DE '||MED);
  
  END IF;
END;

EXECUTE PL_3(30);
EXECUTE PL_3(80);

create or replace PROCEDURE PL_4 (PDEPT_NO NUMBER, PPER NUMBER)
AS
VAPELLIDO EMPLE.APELLIDO%TYPE;
VSALARIO_MEDIO EMPLE.SALARIO%TYPE;
VSALARIO_EMPLE EMPLE.SALARIO%TYPE;
BEGIN
  SELECT APELLIDO INTO VAPELLIDO
    FROM EMPLE
      WHERE DEPT_NO = PDEPT_NO AND SALARIO = (SELECT MIN(SALARIO) FROM EMPLE WHERE DEPT_NO = PDEPT_NO);
  
  SELECT AVG(SALARIO) INTO VSALARIO_MEDIO
    FROM EMPLE
      WHERE DEPT_NO = PDEPT_NO;
      
  SELECT SALARIO INTO VSALARIO_EMPLE
    FROM EMPLE
      WHERE APELLIDO = VAPELLIDO;
      
  IF  VSALARIO_EMPLE+(VSALARIO_EMPLE*(PPER/100))<VSALARIO_MEDIO THEN
    UPDATE EMPLE
      SET SALARIO = VSALARIO_EMPLE+(VSALARIO_EMPLE*(PPER/100))
        WHERE APELLIDO = VAPELLIDO;
  ELSE
    DBMS_OUTPUT.PUT_LINE('EL SALARIO SOBREPASARÁ LA MEDIA DEL DEPARTAMENTO, EL CAMBIO SE HA CANCELADO');
  END IF;
END;

UPDATE EMPLE
  SET SALARIO = 1215
    WHERE APELLIDO = 'TOVAR';
    
UPDATE EMPLE
  SET OFICIO = 'VENDEDOR'
    WHERE APELLIDO = 'TOVAR';

EXECUTE PL_4(30,10);

create or replace PROCEDURE PL_5 (PNUMERO NUMBER)
AS
CONTADOR NUMBER;
VOFICIO EMPLE.OFICIO%TYPE;
VAPELLIDO EMPLE.APELLIDO%TYPE;
VDEPT_NO EMPLE.DEPT_NO%TYPE;
BEGIN
  CONTADOR:=BUSCAR_EMPLE_NUM(PNUMERO);
  
  SELECT OFICIO, APELLIDO, DEPT_NO INTO VOFICIO, VAPELLIDO, VDEPT_NO
    FROM EMPLE
      WHERE EMP_NO = PNUMERO;
  
  IF CONTADOR = 0 THEN
    DBMS_OUTPUT.PUT_LINE('NO EXISTE NINGÚN EMPLEADO CON NÚMERO"||PNUMERO');
  ELSIF VOFICIO = 'DIRECTOR' THEN
    DBMS_OUTPUT.PUT_LINE('ES UN DIRECTOR, TIENES QUE ASIGNAR UN NUEVO DIRECTOR');
  ELSE
    DELETE FROM EMPLE
      WHERE EMP_NO = PNUMERO;
    DBMS_OUTPUT.PUT_LINE('EMPLEADO '||VAPELLIDO||' DEL DEPARTAMENTO '||VDEPT_NO||' HA SIDO BORRADO');
  END IF;
END;

create or replace FUNCTION BUSCAR_EMPLE_NUM(PNUMERO NUMBER)
RETURN VARCHAR2
IS
CONTADOR NUMBER;
BEGIN
  SELECT COUNT(*) INTO CONTADOR
    FROM EMPLE
      WHERE EMP_NO = PNUMERO;
  RETURN CONTADOR;
END;

EXECUTE PL_5(7844);

INSERT INTO EMPLE VALUES (7844,'TOVAR','VENDEDOR',7698,'08/09/2012',
                        1350,0,30);
                        
create or replace PROCEDURE PL_6(PDNOMBRE VARCHAR2, PORCENTAJE NUMBER)
AS
DEPT_MISSING EXCEPTION;
VDEPT_NO EMPLE.DEPT_NO%TYPE;
VSALARIO_PRES EMPLE.SALARIO%TYPE;
BEGIN
  IF PORCENTAJE < 0 AND PORCENTAJE > 100 THEN
    DBMS_OUTPUT.PUT_LINE('PORCENTAJE NO VÁLIDO');
  END IF;

  VDEPT_NO:=BUSCAR_DEPT_NO(PDNOMBRE);
  
  IF VDEPT_NO IS NULL THEN
    RAISE DEPT_MISSING;
  END IF;
  
  SELECT SALARIO INTO VSALARIO_PRES
    FROM EMPLE
      WHERE OFICIO = 'PRESIDENTE';
  
  UPDATE EMPLE
      SET SALARIO = SALARIO+(SALARIO*(PORCENTAJE/100))
        WHERE DEPT_NO = (SELECT DEPT_NO FROM DEPART WHERE DNOMBRE = PDNOMBRE)
          AND SALARIO+(SALARIO*(PORCENTAJE/100)) < VSALARIO_PRES;
  
EXCEPTION
WHEN DEPT_MISSING THEN
  DBMS_OUTPUT.PUT_LINE('NO EXISTE EL DEPARTAMENTO '||PDNOMBRE);  
  
END;

EXECUTE PL_6('CONTABILIDAD',10);

EXECUTE PL_6('KEBAB',10);

create or replace FUNCTION COUNT_EMPLE_DEPT(PDNOMBRE VARCHAR2)
RETURN NUMBER
IS
DEPART_MISSING EXCEPTION;
CONTADOR NUMBER;
VDEPT_NO DEPART.DEPT_NO%TYPE;
BEGIN
  CONTADOR:=BUSCAR_DEPART_NOMBRE(PDNOMBRE);
  
  IF CONTADOR = 0 THEN
    RAISE DEPART_MISSING;
  END IF;

  SELECT COUNT(APELLIDO) INTO CONTADOR
    FROM EMPLE
      WHERE DEPT_NO = (SELECT DEPT_NO FROM DEPART WHERE DNOMBRE = PDNOMBRE);
      
  IF CONTADOR = 0 THEN
    RETURN -1;
  ELSIF CONTADOR != 0 THEN
    SELECT DEPT_NO INTO VDEPT_NO
      FROM DEPART
        WHERE DNOMBRE = PDNOMBRE;
  
    RETURN VDEPT_NO;
  END IF;
  
EXCEPTION
  WHEN DEPART_MISSING THEN
    RETURN NULL;
END;

CREATE OR REPLACE PROCEDURE PL_7(PDNOMBRE VARCHAR2)
AS
EMP_ENCONTRADO NUMBER;
BEGIN
  EMP_ENCONTRADO:=COUNT_EMPLE_DEPT(PDNOMBRE);
  
  IF EMP_ENCONTRADO IS NULL THEN
    DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO '||PDNOMBRE||' NO EXISTE');
  ELSE
      DBMS_OUTPUT.PUT_LINE(EMP_ENCONTRADO);
  END IF;
END;

EXECUTE PL_7('CONTABILIDAD');
EXECUTE PL_7('PRODUCCION');
EXECUTE PL_7('KEBAB');

CREATE OR REPLACE PROCEDURE SUBE_SAL_EXCEP (PNUM_EMPLE NUMBER, PCANTIDAD NUMBER)
AS
VCANTIDAD NUMBER;
ERROR_NULO EXCEPTION;
ERROR_NEGATIVO EXCEPTION;
BEGIN
SELECT SALARIO INTO VCANTIDAD
  FROM EMPLE
    WHERE EMP_NO = PNUM_EMPLE;
    
IF PCANTIDAD IS NULL THEN
  RAISE ERROR_NULO;  
END IF;

IF PCANTIDAD <0 THEN
  RAISE ERROR_NULO;  
END IF;
    
EXCEPTION
WHEN NO_DATA_FOUND THEN
  DBMS_OUTPUT.PUT_LINE('NO EXISTE EL EMPLEADO');
  
WHEN ERROR_NULO THEN
  DBMS_OUTPUT.PUT_LINE('CANTIDAD INTRODUCIDA NO VÁLIDA');
  
WHEN ERROR_NEGATIVO THEN
  DBMS_OUTPUT.PUT_LINE('CANTIDAD INTRODUCIDA NEGATIVA');
  

END;

SELECT * FROM ARREGLOS;
SELECT * FROM MECANICOS;
SELECT * FROM COCHES_TALLER;
SELECT * FROM CLIENTES_TALLER;

CREATE OR REPLACE PROCEDURE PL_8(PTIPO CHAR,PMATRICULA VARCHAR2, PFUNCION VARCHAR2, PIMPORTE NUMBER)
AS
TIPO_INCORRECTO EXCEPTION;
MAT_FORMAT EXCEPTION;
FOUND_MAT BOOLEAN;
EMPLE_FUNCION MECANICOS.NEMPLEADO%TYPE;
MAT_NOT_IN_ARREGLOS EXCEPTION;
BEGIN

  IF PTIPO NOT IN ('A','T') THEN
      RAISE TIPO_INCORRECTO;
  END IF;
  
  IF PTIPO='A' THEN
      FOUND_MAT:=BUSCA_MATRICULA(PMATRICULA);
  
      IF FOUND_MAT=FALSE THEN
      RAISE MAT_FORMAT;
      END IF;
  
      EMPLE_FUNCION:=BUSCA_FUNCION(PFUNCION);
  
      IF PIMPORTE>=0 THEN
        INSERT INTO ARREGLOS VALUES (PMATRICULA,EMPLE_FUNCION,SYSDATE,NULL,PIMPORTE);
      ELSE
        INSERT INTO ARREGLOS VALUES (PMATRICULA,EMPLE_FUNCION,SYSDATE,NULL,0);
      END IF;
  ELSIF PTIPO='T' THEN
      FOUND_MAT:=BUSCA_MATRICULA_ARREGLOS(PMATRICULA);
      
      IF FOUND_MAT=FALSE THEN
        RAISE MAT_NOT_IN_ARREGLOS;
      END IF;
      
      IF PIMPORTE>=0 THEN
        UPDATE ARREGLOS SET FECHA_SALIDA=SYSDATE WHERE MATRICULA=PMATRICULA;
        UPDATE ARREGLOS SET IMPORTE=PIMPORTE WHERE MATRICULA=PMATRICULA;
      ELSE
        UPDATE ARREGLOS SET FECHA_SALIDA=SYSDATE WHERE MATRICULA=PMATRICULA;
      END IF;
      
  END IF;

EXCEPTION
  WHEN TIPO_INCORRECTO THEN
    DBMS_OUTPUT.PUT_LINE('DATO INCORRECTO, SE ACABA EL PROCEDIMIENTO');
  WHEN MAT_FORMAT THEN
    DBMS_OUTPUT.PUT_LINE('FORMATO DE MATRICULA INCORRECTA');
  WHEN MAT_NOT_IN_ARREGLOS THEN
    DBMS_OUTPUT.PUT_LINE('LA MATRICULA NO ESTÁ EN ARREGLO');
END;

EXECUTE PL_8('C','1234XYZ','LUNAS',160);
EXECUTE PL_8('A','1234XYZ','MECANICO',160);
EXECUTE PL_8('A','1234ABC','LUNAS',160);
EXECUTE PL_8('A','1111JKL','RUEDAS',160);
EXECUTE PL_8('A','1234XY','LUNAS',160);

EXECUTE PL_8('T','1234XYZ','MECANICO',200);
EXECUTE PL_8('T','1234ABC','LUNAS',-300);
EXECUTE PL_8('T','1111JKL','RUEDAS',120);

DELETE FROM COCHES_TALLER WHERE MATRICULA='1234XYZ';
DELETE FROM ARREGLOS WHERE MATRICULA='1234XYZ';
DELETE FROM ARREGLOS WHERE MATRICULA='1234ABC';
DELETE FROM ARREGLOS WHERE MATRICULA='1111JKL';

CREATE OR REPLACE FUNCTION BUSCA_MATRICULA(PMATRICULA VARCHAR2)
RETURN BOOLEAN
IS
CONTADOR NUMBER;
BEGIN
  SELECT COUNT(*) INTO CONTADOR FROM COCHES_TALLER WHERE PMATRICULA = MATRICULA;


  IF REGEXP_LIKE(PMATRICULA,'[0-9]{4}[A-Z]{3}')=FALSE THEN
    RETURN FALSE;
  ELSIF (CONTADOR=0) THEN
    INSERT INTO COCHES_TALLER VALUES(PMATRICULA,'N/A',NULL,0);
    RETURN TRUE;
  ELSE
    RETURN TRUE;
  END IF;
END;

CREATE OR REPLACE FUNCTION BUSCA_FUNCION(PFUNCION VARCHAR2)
RETURN MECANICOS.NEMPLEADO%TYPE
IS
VN_EMPLE MECANICOS.NEMPLEADO%TYPE;
BEGIN
  SELECT NEMPLEADO INTO VN_EMPLE
    FROM MECANICOS
      WHERE FUNCION=PFUNCION AND FECHA_ING=(SELECT MAX(FECHA_ING)
                                              FROM MECANICOS
                                                WHERE FUNCION=PFUNCION);
  
  RETURN VN_EMPLE;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    SELECT NEMPLEADO INTO VN_EMPLE
      FROM MECANICOS
        WHERE FECHA_ING=(SELECT MIN(FECHA_ING)
                          FROM MECANICOS);
  RETURN VN_EMPLE;
END;


CREATE OR REPLACE FUNCTION BUSCA_MATRICULA_ARREGLOS(PMATRICULA VARCHAR2)
RETURN BOOLEAN
IS
CONTADOR NUMBER;
BEGIN
  SELECT COUNT(*) INTO CONTADOR
    FROM ARREGLOS
      WHERE PMATRICULA = MATRICULA AND FECHA_SALIDA IS NULL;
  IF CONTADOR = 0 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;
END;
